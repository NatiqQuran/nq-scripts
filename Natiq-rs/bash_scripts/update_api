#!/bin/bash
# ============================================
# Version: 1.0.1
# Description: This bash script updates a main Git branch,
# optionally restarts Docker services, and runs a series of Python scripts
# for creating an admin user, parsing Quran XML, and parsing translations.
# ============================================
# (nq-team)

RED_TXT='\033[0;31m'
GREEN_TXT='\033[0;32m'
YELLOW_TXT='\033[0;33m'
BOLD='\033[1m'
RESET='\033[0m'

set -e

# Function to run git pull
GIT_UPDATE() {
    STATUS_OUTPUT=$(git status)
    if [[ $STATUS_OUTPUT == *"Your branch is behind"* ]]; then
        echo -e "${YELLOW_TXT}>>> Your branch is behind with ${RED_TXT}'origin/main'${YELLOW_TXT}, pulling changes...${RESET}"    
        git pull
        echo -e "${GREEN_TXT}>>> git pulled, your branch is up-to-date with ${RED_TXT}'origin/main'${RESET}"
    else
        echo -e "${GREEN_TXT}>>> The branch is up-to-date with ${RED_TXT}'origin/main'${RESET}"
    fi
}

# Restarts Docker and creates admin user
RESTART_DB() {
    # Docker restart process
    echo -e "${YELLOW_TXT}${BOLD}--- Restarting Docker Services ---${RESET}"
    docker compose down
    echo -e "${GREEN_TXT}>>> Docker services stopped${RESET}"
    docker compose pull
    echo -e "${GREEN_TXT}>>> Docker images updated${RESET}"
    docker compose up -d
    echo -e "${GREEN_TXT}>>> Docker services restarted${RESET}"
}

# Extracts Postgres password and port
EXTRACT_POSTGRES_INFO() {
    DOCKER_COMPOSE_FILE="../../docker-compose.yml"
    POSTGRES_PASSWORD=$(grep 'POSTGRES_PASSWORD' "$DOCKER_COMPOSE_FILE" | awk -F': ' '{print $2}' | tr -d '"')
    POSTGRES_PORT=$(docker ps --filter "ancestor=postgres:latest" --format "{{.Ports}}" | grep -oP '0\.0\.0\.0:\K[0-9]+')
}

# Create admin user
CREATE_ADMIN_USER() {
    # Run admin user creation script
    echo -e "${YELLOW_TXT}${BOLD}--- Creating Admin User ---${RESET}"
    python3 ../admin_user_creator/admin_user_creator.py base localhost admin "$POSTGRES_PASSWORD" "$POSTGRES_PORT" "$EMAIL" "$USER_NAME"
    echo -e "${GREEN_TXT}>>> Admin account created\n>>> Email: $EMAIL\n>>> User_name: $USER_NAME${RESET}"
}

# Function to run scripts
run_scripts() {
    # Run quran parser script
    echo -e "${YELLOW_TXT}${BOLD}--- Running Quran Parser ---${RESET}"
    python3 ../tanzil_quran_parser/quran_parser.py ../tanzil_quran_parser/quran-uthmani.xml base localhost admin "$POSTGRES_PASSWORD" "$POSTGRES_PORT"
    echo -e "${GREEN_TXT}>>> quran_parser.py Successfully executed${RESET}"
    # Run translation parser script
    echo -e "${YELLOW_TXT}${BOLD}--- Running Translation Parser ---${RESET}"
    python3 ../tanzil_translation_parser/translation_parser.py ../tanzil_translation_parser/translations/ base localhost admin "$POSTGRES_PASSWORD" "$POSTGRES_PORT"
    echo -e "${GREEN_TXT}>>> translation_parser.py Successfully executed${RESET}"
}

# Check arguments
if [[ $1 == "resetdb-y" ]]; then
    EMAIL=$2
    USER_NAME=$3
    if [ -z "$EMAIL" ] || [ -z "$USER_NAME" ]; then
        echo -e "${RED_TXT}Error: [Email] and [username] are required when using resetdb-y${RESET}"
        exit 1
    fi
     # Start time recording
    start_time=$(date +%s)
    GIT_UPDATE
    RESTART_DB
    sleep 10
    EXTRACT_POSTGRES_INFO
    CREATE_ADMIN_USER
    run_scripts
    # End time recording
    end_time=$(date +%s)

elif [[ $1 == "resetdb-n" ]]; then
    GIT_UPDATE
    EXTRACT_POSTGRES_INFO
    run_scripts

else
    echo -e "${YELLOW_TXT}${BOLD}You can run this bash script with the following options:\n${RESET}"
    echo -e "1. bash update_api [resetdb-y] [email] [username] - Restart Docker and create admin user"
    echo -e "2. bash update_api [resetdb-n] - Skip Docker restart and run scripts only\n"

    while true; do
        read -p "Do you want to restart Docker services? (y/n): " ANSWER
        case "$ANSWER" in
            y)
                read -p "Enter admin Email: " EMAIL
                read -p "Enter admin UserName: " USER_NAME
                # Start time recording
                start_time=$(date +%s)
                GIT_UPDATE
                RESTART_DB
                sleep 5
                EXTRACT_POSTGRES_INFO
                CREATE_ADMIN_USER
                run_scripts
                # End time recording
                end_time=$(date +%s)
                break
                ;;
            n)
                GIT_UPDATE
                EXTRACT_POSTGRES_INFO
                run_scripts
                break
                ;;
            *)
                echo -e "${RED_TXT}Invalid input. Please enter 'y' or 'n'.${RESET}"
                ;;
        esac
    done
fi

# Calculate Update process time
total_time=$((end_time - start_time))
echo -e "${GREEN_TXT}>>> Docker restart process time: ${RED_TXT}$((total_time / 60))${GREEN_TXT} minutes and ${RED_TXT}$((total_time % 60)) ${GREEN_TXT}seconds"
echo -e "${BOLD}--- Update completed! ---${RESET}"